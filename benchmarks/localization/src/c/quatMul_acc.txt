/********************************
Author: Sravanthi Kota Venkata
********************************/

#include <stdio.h>
#include <stdlib.h>
#include "localization.h"
#include "globals.h"
#include <assert.h>
extern hw_ac **myOp;   

F2D* quatMul(F2D* a, F2D* b)
{
    int ra, ca, rb, cb;
    F2D *ret;
    int i, j, k=0;

    ra = a->height;
    ca = a->width;

    rb = b->height;
    cb = b->width;

    ret = fSetArray(ra, 4, 0);

    j = 0;
    for(i=0; i<ra; i++)
    {
        k = 0;
        float ai0, ai1, ai2, ai3;
        float bj0, bj1, bj2, bj3;

        ai0 = subsref(a,i,0);
        ai1 = subsref(a,i,1);
        ai2 = subsref(a,i,2);
        ai3 = subsref(a,i,3);
        
        bj0 = subsref(b,j,0);
        bj1 = subsref(b,j,1);
        bj2 = subsref(b,j,2);
        bj3 = subsref(b,j,3);
        
        float tempVar[16]; 
        //subsref(ret,i,k++) = ai0*bj0 - ai1*bj1 - ai2*bj2 - ai3*bj3;
        tempVar[0] = myOp[20]->calc(ai0,bj0); //MultiplicationOpIgnore
        tempVar[1] = myOp[21]->calc(ai1,bj1); //MultiplicationOpIgnore
        tempVar[2] = myOp[22]->calc(ai2,bj2); //MultiplicationOpIgnore
        tempVar[3] = myOp[23]->calc(ai3,bj3); //MultiplicationOpIgnore
        subsref(ret,i,k) =  myOp[24]->calc(tempVar[0], -1*tempVar[1]); //AdditionOpIgnore
        subsref(ret,i,k) = myOp[25]->calc(subsref(ret,i,k),  -1*tempVar[2]); //AdditionOpIgnore
        subsref(ret,i,k) = myOp[26]->calc(subsref(ret,i,k),  -1* tempVar[3]); //AdditionOpIgnore
        k++;


        //         subsref(ret,i,k++) = ai0*bj1 + ai1*bj0 + ai2*bj3 - ai3*bj2;
        tempVar[4] =  myOp[27]->calc(ai0,bj1); //MultiplicationOpIgnore
        tempVar[5] =  myOp[28]->calc(ai1,bj0);  //MultiplicationOpIgnore
        tempVar[6] = myOp[29]->calc(ai2,bj3); //MultiplicationOpIgnore
        tempVar[7] = myOp[30]->calc(ai3,bj2); //MultiplicationOpIgnore

        subsref(ret,i,k) =  myOp[31]->calc(tempVar[4],tempVar[5]); //AdditionOpIgnore
        subsref(ret,i,k) = myOp[32]->calc(subsref(ret,i,k), tempVar[6]); //AdditionOpIgnore
        subsref(ret,i,k) = myOp[33]->calc(subsref(ret,i,k), -1*tempVar[7]); //AdditionOpIgnore
        k++;

         //subsref(ret,i,k++) = ai0*bj2 - ai1*bj3 + ai2*bj0 + ai3*bj1;
         tempVar[8] = myOp[34]->calc(ai0,bj2); //MultiplicationOpIgnore
         tempVar[9] = myOp[35]->calc(ai1,bj3); //MultiplicationOpIgnore
         tempVar[10] = myOp[36]->calc(ai2,bj0); //MultiplicationOpIgnore
         tempVar[11] = myOp[37]->calc(ai3,bj1); //MultiplicationOpIgnore
         subsref(ret,i,k) =  myOp[38]->calc(tempVar[8], -1*tempVar[9]); //AdditionOpIgnore 
         subsref(ret,i,k) = myOp[39]->calc(subsref(ret,i,k), tempVar[10]); //AdditionOpIgnore
         subsref(ret,i,k) = myOp[40]->calc(subsref(ret,i,k), tempVar[11]); //AdditionOpIgnore
         k++;

         //        subsref(ret,i,k++) = ai0*bj3 + ai1*bj2 - ai2*bj1 + ai3*bj0;
         tempVar[12] =  myOp[41]->calc(ai0,bj3); //MultiplicationOpIgnore
         tempVar[13] = myOp[42]->calc(ai1,bj2); //MultiplicationOpIgnore
         tempVar[14] = myOp[43]->calc(ai2,bj1); //MultiplicationOpIgnore
         tempVar[15] = myOp[44]->calc(ai3,bj0); //MultiplicationOpIgnore
         subsref(ret,i,k) =  myOp[45]->calc(tempVar[12], tempVar[13]); //AdditionOpIgnore
         subsref(ret,i,k) = myOp[46]->calc(subsref(ret,i,k), -1*tempVar[14]); //AdditionOpIgnore
         subsref(ret,i,k) = myOp[47]->calc(subsref(ret,i,k),  tempVar[15]); //AdditionOpIgnore
         k++;

        if(rb == ra)
            j++;
    }
    return ret;
}





